# **********************************************************************
#
# Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

# Ice version 3.4.1

# <auto-generated>
#
# Generated from file `Control.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice, IcePy, __builtin__

# Start of module ControlTopic
_M_ControlTopic = Ice.openModule('ControlTopic')
__name__ = 'ControlTopic'

if not _M_ControlTopic.__dict__.has_key('Control'):
    _M_ControlTopic.Control = Ice.createTempClass()
    class Control(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_ControlTopic.Control:
                raise RuntimeError('ControlTopic.Control is an abstract class')

        def ice_ids(self, current=None):
            return ('::ControlTopic::Control', '::Ice::Object')

        def ice_id(self, current=None):
            return '::ControlTopic::Control'

        def ice_staticId():
            return '::ControlTopic::Control'
        ice_staticId = staticmethod(ice_staticId)

        def connect(self, current=None):
            pass

        def disconnect(self, current=None):
            pass

        def setLeftMotorSpeed(self, speed, current=None):
            pass

        def setRightMotorSpeed(self, speed, current=None):
            pass

        def driveForward(self, current=None):
            pass

        def driveForwardSpeed(self, speed, current=None):
            pass

        def driveBackward(self, current=None):
            pass

        def driveBackwardSpeed(self, speed, current=None):
            pass

        def driveStop(self, current=None):
            pass

        def turnLeft(self, current=None):
            pass

        def turnLeftSpeed(self, speed, current=None):
            pass

        def turnRight(self, current=None):
            pass

        def turnRightSpeed(self, speed, current=None):
            pass

        def kick(self, current=None):
            pass

        def sendInt(self, i, current=None):
            pass

        def shutDownRobot(self, current=None):
            pass

        def isMoving(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_ControlTopic._t_Control)

        __repr__ = __str__

    _M_ControlTopic.ControlPrx = Ice.createTempClass()
    class ControlPrx(Ice.ObjectPrx):

        def connect(self, _ctx=None):
            return _M_ControlTopic.Control._op_connect.invoke(self, ((), _ctx))

        def begin_connect(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_connect.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_connect(self, _r):
            return _M_ControlTopic.Control._op_connect.end(self, _r)

        def disconnect(self, _ctx=None):
            return _M_ControlTopic.Control._op_disconnect.invoke(self, ((), _ctx))

        def begin_disconnect(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_disconnect.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_disconnect(self, _r):
            return _M_ControlTopic.Control._op_disconnect.end(self, _r)

        def setLeftMotorSpeed(self, speed, _ctx=None):
            return _M_ControlTopic.Control._op_setLeftMotorSpeed.invoke(self, ((speed, ), _ctx))

        def begin_setLeftMotorSpeed(self, speed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_setLeftMotorSpeed.begin(self, ((speed, ), _response, _ex, _sent, _ctx))

        def end_setLeftMotorSpeed(self, _r):
            return _M_ControlTopic.Control._op_setLeftMotorSpeed.end(self, _r)

        def setRightMotorSpeed(self, speed, _ctx=None):
            return _M_ControlTopic.Control._op_setRightMotorSpeed.invoke(self, ((speed, ), _ctx))

        def begin_setRightMotorSpeed(self, speed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_setRightMotorSpeed.begin(self, ((speed, ), _response, _ex, _sent, _ctx))

        def end_setRightMotorSpeed(self, _r):
            return _M_ControlTopic.Control._op_setRightMotorSpeed.end(self, _r)

        def driveForward(self, _ctx=None):
            return _M_ControlTopic.Control._op_driveForward.invoke(self, ((), _ctx))

        def begin_driveForward(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_driveForward.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_driveForward(self, _r):
            return _M_ControlTopic.Control._op_driveForward.end(self, _r)

        def driveForwardSpeed(self, speed, _ctx=None):
            return _M_ControlTopic.Control._op_driveForwardSpeed.invoke(self, ((speed, ), _ctx))

        def begin_driveForwardSpeed(self, speed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_driveForwardSpeed.begin(self, ((speed, ), _response, _ex, _sent, _ctx))

        def end_driveForwardSpeed(self, _r):
            return _M_ControlTopic.Control._op_driveForwardSpeed.end(self, _r)

        def driveBackward(self, _ctx=None):
            return _M_ControlTopic.Control._op_driveBackward.invoke(self, ((), _ctx))

        def begin_driveBackward(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_driveBackward.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_driveBackward(self, _r):
            return _M_ControlTopic.Control._op_driveBackward.end(self, _r)

        def driveBackwardSpeed(self, speed, _ctx=None):
            return _M_ControlTopic.Control._op_driveBackwardSpeed.invoke(self, ((speed, ), _ctx))

        def begin_driveBackwardSpeed(self, speed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_driveBackwardSpeed.begin(self, ((speed, ), _response, _ex, _sent, _ctx))

        def end_driveBackwardSpeed(self, _r):
            return _M_ControlTopic.Control._op_driveBackwardSpeed.end(self, _r)

        def driveStop(self, _ctx=None):
            return _M_ControlTopic.Control._op_driveStop.invoke(self, ((), _ctx))

        def begin_driveStop(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_driveStop.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_driveStop(self, _r):
            return _M_ControlTopic.Control._op_driveStop.end(self, _r)

        def turnLeft(self, _ctx=None):
            return _M_ControlTopic.Control._op_turnLeft.invoke(self, ((), _ctx))

        def begin_turnLeft(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_turnLeft.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_turnLeft(self, _r):
            return _M_ControlTopic.Control._op_turnLeft.end(self, _r)

        def turnLeftSpeed(self, speed, _ctx=None):
            return _M_ControlTopic.Control._op_turnLeftSpeed.invoke(self, ((speed, ), _ctx))

        def begin_turnLeftSpeed(self, speed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_turnLeftSpeed.begin(self, ((speed, ), _response, _ex, _sent, _ctx))

        def end_turnLeftSpeed(self, _r):
            return _M_ControlTopic.Control._op_turnLeftSpeed.end(self, _r)

        def turnRight(self, _ctx=None):
            return _M_ControlTopic.Control._op_turnRight.invoke(self, ((), _ctx))

        def begin_turnRight(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_turnRight.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_turnRight(self, _r):
            return _M_ControlTopic.Control._op_turnRight.end(self, _r)

        def turnRightSpeed(self, speed, _ctx=None):
            return _M_ControlTopic.Control._op_turnRightSpeed.invoke(self, ((speed, ), _ctx))

        def begin_turnRightSpeed(self, speed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_turnRightSpeed.begin(self, ((speed, ), _response, _ex, _sent, _ctx))

        def end_turnRightSpeed(self, _r):
            return _M_ControlTopic.Control._op_turnRightSpeed.end(self, _r)

        def kick(self, _ctx=None):
            return _M_ControlTopic.Control._op_kick.invoke(self, ((), _ctx))

        def begin_kick(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_kick.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_kick(self, _r):
            return _M_ControlTopic.Control._op_kick.end(self, _r)

        def sendInt(self, i, _ctx=None):
            return _M_ControlTopic.Control._op_sendInt.invoke(self, ((i, ), _ctx))

        def begin_sendInt(self, i, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_sendInt.begin(self, ((i, ), _response, _ex, _sent, _ctx))

        def end_sendInt(self, _r):
            return _M_ControlTopic.Control._op_sendInt.end(self, _r)

        def shutDownRobot(self, _ctx=None):
            return _M_ControlTopic.Control._op_shutDownRobot.invoke(self, ((), _ctx))

        def begin_shutDownRobot(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_shutDownRobot.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_shutDownRobot(self, _r):
            return _M_ControlTopic.Control._op_shutDownRobot.end(self, _r)

        def isMoving(self, _ctx=None):
            return _M_ControlTopic.Control._op_isMoving.invoke(self, ((), _ctx))

        def begin_isMoving(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ControlTopic.Control._op_isMoving.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_isMoving(self, _r):
            return _M_ControlTopic.Control._op_isMoving.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_ControlTopic.ControlPrx.ice_checkedCast(proxy, '::ControlTopic::Control', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_ControlTopic.ControlPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_ControlTopic._t_ControlPrx = IcePy.defineProxy('::ControlTopic::Control', ControlPrx)

    _M_ControlTopic._t_Control = IcePy.defineClass('::ControlTopic::Control', Control, (), True, None, (), ())
    Control._ice_type = _M_ControlTopic._t_Control

    Control._op_connect = IcePy.Operation('connect', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_disconnect = IcePy.Operation('disconnect', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_setLeftMotorSpeed = IcePy.Operation('setLeftMotorSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Control._op_setRightMotorSpeed = IcePy.Operation('setRightMotorSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Control._op_driveForward = IcePy.Operation('driveForward', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_driveForwardSpeed = IcePy.Operation('driveForwardSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Control._op_driveBackward = IcePy.Operation('driveBackward', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_driveBackwardSpeed = IcePy.Operation('driveBackwardSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Control._op_driveStop = IcePy.Operation('driveStop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_turnLeft = IcePy.Operation('turnLeft', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_turnLeftSpeed = IcePy.Operation('turnLeftSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Control._op_turnRight = IcePy.Operation('turnRight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_turnRightSpeed = IcePy.Operation('turnRightSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Control._op_kick = IcePy.Operation('kick', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_sendInt = IcePy.Operation('sendInt', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Control._op_shutDownRobot = IcePy.Operation('shutDownRobot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Control._op_isMoving = IcePy.Operation('isMoving', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), IcePy._t_bool, ())

    _M_ControlTopic.Control = Control
    del Control

    _M_ControlTopic.ControlPrx = ControlPrx
    del ControlPrx

# End of module ControlTopic
