# **********************************************************************
#
# Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

# Ice version 3.4.1

# <auto-generated>
#
# Generated from file `Hello.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice, IcePy, __builtin__

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if not _M_Demo.__dict__.has_key('TimeOfDay'):
    _M_Demo.TimeOfDay = Ice.createTempClass()
    class TimeOfDay(object):
        def __init__(self, hour=0, minute=0, second=0):
            self.hour = hour
            self.minute = minute
            self.second = second

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.hour)
            _h = 5 * _h + __builtin__.hash(self.minute)
            _h = 5 * _h + __builtin__.hash(self.second)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Demo.TimeOfDay):
                return self.hour < other.hour or self.minute < other.minute or self.second < other.second
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Demo.TimeOfDay):
                return self.hour <= other.hour or self.minute <= other.minute or self.second <= other.second
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Demo.TimeOfDay):
                return self.hour == other.hour and self.minute == other.minute and self.second == other.second
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Demo.TimeOfDay):
                return self.hour != other.hour or self.minute != other.minute or self.second != other.second
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Demo.TimeOfDay):
                return self.hour > other.hour or self.minute > other.minute or self.second > other.second
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Demo.TimeOfDay):
                return self.hour >= other.hour or self.minute >= other.minute or self.second >= other.second
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_TimeOfDay)

        __repr__ = __str__

    _M_Demo._t_TimeOfDay = IcePy.defineStruct('::Demo::TimeOfDay', TimeOfDay, (), (
        ('hour', (), IcePy._t_short),
        ('minute', (), IcePy._t_short),
        ('second', (), IcePy._t_short)
    ))

    _M_Demo.TimeOfDay = TimeOfDay
    del TimeOfDay

if not _M_Demo.__dict__.has_key('Hello'):
    _M_Demo.Hello = Ice.createTempClass()
    class Hello(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Demo.Hello:
                raise RuntimeError('Demo.Hello is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Hello', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Hello'

        def ice_staticId():
            return '::Demo::Hello'
        ice_staticId = staticmethod(ice_staticId)

        def sayHello(self, s, current=None):
            pass

        def getTime(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Hello)

        __repr__ = __str__

    _M_Demo.HelloPrx = Ice.createTempClass()
    class HelloPrx(Ice.ObjectPrx):

        def sayHello(self, s, _ctx=None):
            return _M_Demo.Hello._op_sayHello.invoke(self, ((s, ), _ctx))

        def begin_sayHello(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Hello._op_sayHello.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_sayHello(self, _r):
            return _M_Demo.Hello._op_sayHello.end(self, _r)

        def getTime(self, _ctx=None):
            return _M_Demo.Hello._op_getTime.invoke(self, ((), _ctx))

        def begin_getTime(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Hello._op_getTime.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getTime(self, _r):
            return _M_Demo.Hello._op_getTime.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.HelloPrx.ice_checkedCast(proxy, '::Demo::Hello', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.HelloPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Demo._t_HelloPrx = IcePy.defineProxy('::Demo::Hello', HelloPrx)

    _M_Demo._t_Hello = IcePy.defineClass('::Demo::Hello', Hello, (), True, None, (), ())
    Hello._ice_type = _M_Demo._t_Hello

    Hello._op_sayHello = IcePy.Operation('sayHello', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, ())
    Hello._op_getTime = IcePy.Operation('getTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_Demo._t_TimeOfDay, ())

    _M_Demo.Hello = Hello
    del Hello

    _M_Demo.HelloPrx = HelloPrx
    del HelloPrx

# End of module Demo
