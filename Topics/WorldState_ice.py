# **********************************************************************
#
# Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

# Ice version 3.4.1

# <auto-generated>
#
# Generated from file `WorldState.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice, IcePy, __builtin__

# Start of module WorldStateTopic
_M_WorldStateTopic = Ice.openModule('WorldStateTopic')
__name__ = 'WorldStateTopic'

if not _M_WorldStateTopic.__dict__.has_key('Position'):
    _M_WorldStateTopic.Position = Ice.createTempClass()
    class Position(object):
        def __init__(self, x=0.0, y=0.0):
            self.x = x
            self.y = y

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.x)
            _h = 5 * _h + __builtin__.hash(self.y)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_WorldStateTopic.Position):
                return self.x < other.x or self.y < other.y
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_WorldStateTopic.Position):
                return self.x <= other.x or self.y <= other.y
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_WorldStateTopic.Position):
                return self.x == other.x and self.y == other.y
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_WorldStateTopic.Position):
                return self.x != other.x or self.y != other.y
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_WorldStateTopic.Position):
                return self.x > other.x or self.y > other.y
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_WorldStateTopic.Position):
                return self.x >= other.x or self.y >= other.y
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_WorldStateTopic._t_Position)

        __repr__ = __str__

    _M_WorldStateTopic._t_Position = IcePy.defineStruct('::WorldStateTopic::Position', Position, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float)
    ))

    _M_WorldStateTopic.Position = Position
    del Position

if not _M_WorldStateTopic.__dict__.has_key('Ball'):
    _M_WorldStateTopic.Ball = Ice.createTempClass()
    class Ball(object):
        def __init__(self, pos=Ice._struct_marker):
            if pos is Ice._struct_marker:
                self.pos = _M_WorldStateTopic.Position()
            else:
                self.pos = pos

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.pos)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_WorldStateTopic.Ball):
                return self.pos < other.pos
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_WorldStateTopic.Ball):
                return self.pos <= other.pos
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_WorldStateTopic.Ball):
                return self.pos == other.pos
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_WorldStateTopic.Ball):
                return self.pos != other.pos
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_WorldStateTopic.Ball):
                return self.pos > other.pos
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_WorldStateTopic.Ball):
                return self.pos >= other.pos
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_WorldStateTopic._t_Ball)

        __repr__ = __str__

    _M_WorldStateTopic._t_Ball = IcePy.defineStruct('::WorldStateTopic::Ball', Ball, (), (('pos', (), _M_WorldStateTopic._t_Position),))

    _M_WorldStateTopic.Ball = Ball
    del Ball

if not _M_WorldStateTopic.__dict__.has_key('Robot'):
    _M_WorldStateTopic.Robot = Ice.createTempClass()
    class Robot(object):
        def __init__(self, pos=Ice._struct_marker, rot=0.0):
            if pos is Ice._struct_marker:
                self.pos = _M_WorldStateTopic.Position()
            else:
                self.pos = pos
            self.rot = rot

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.pos)
            _h = 5 * _h + __builtin__.hash(self.rot)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_WorldStateTopic.Robot):
                return self.pos < other.pos or self.rot < other.rot
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_WorldStateTopic.Robot):
                return self.pos <= other.pos or self.rot <= other.rot
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_WorldStateTopic.Robot):
                return self.pos == other.pos and self.rot == other.rot
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_WorldStateTopic.Robot):
                return self.pos != other.pos or self.rot != other.rot
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_WorldStateTopic.Robot):
                return self.pos > other.pos or self.rot > other.rot
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_WorldStateTopic.Robot):
                return self.pos >= other.pos or self.rot >= other.rot
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_WorldStateTopic._t_Robot)

        __repr__ = __str__

    _M_WorldStateTopic._t_Robot = IcePy.defineStruct('::WorldStateTopic::Robot', Robot, (), (
        ('pos', (), _M_WorldStateTopic._t_Position),
        ('rot', (), IcePy._t_float)
    ))

    _M_WorldStateTopic.Robot = Robot
    del Robot

if not _M_WorldStateTopic.__dict__.has_key('WorldState'):
    _M_WorldStateTopic.WorldState = Ice.createTempClass()
    class WorldState(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_WorldStateTopic.WorldState:
                raise RuntimeError('WorldStateTopic.WorldState is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::WorldStateTopic::WorldState')

        def ice_id(self, current=None):
            return '::WorldStateTopic::WorldState'

        def ice_staticId():
            return '::WorldStateTopic::WorldState'
        ice_staticId = staticmethod(ice_staticId)

        def getUpdateID(self, current=None):
            pass

        def getBallPosition(self, current=None):
            pass

        def getYellowRobot(self, current=None):
            pass

        def getBlueRobot(self, current=None):
            pass

        def getPitch(self, current=None):
            pass

        def getShootingDirection(self, current=None):
            pass

        def getTeamColour(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_WorldStateTopic._t_WorldState)

        __repr__ = __str__

    _M_WorldStateTopic.WorldStatePrx = Ice.createTempClass()
    class WorldStatePrx(Ice.ObjectPrx):

        def getUpdateID(self, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getUpdateID.invoke(self, ((), _ctx))

        def begin_getUpdateID(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getUpdateID.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getUpdateID(self, _r):
            return _M_WorldStateTopic.WorldState._op_getUpdateID.end(self, _r)

        def getBallPosition(self, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getBallPosition.invoke(self, ((), _ctx))

        def begin_getBallPosition(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getBallPosition.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getBallPosition(self, _r):
            return _M_WorldStateTopic.WorldState._op_getBallPosition.end(self, _r)

        def getYellowRobot(self, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getYellowRobot.invoke(self, ((), _ctx))

        def begin_getYellowRobot(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getYellowRobot.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getYellowRobot(self, _r):
            return _M_WorldStateTopic.WorldState._op_getYellowRobot.end(self, _r)

        def getBlueRobot(self, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getBlueRobot.invoke(self, ((), _ctx))

        def begin_getBlueRobot(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getBlueRobot.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getBlueRobot(self, _r):
            return _M_WorldStateTopic.WorldState._op_getBlueRobot.end(self, _r)

        def getPitch(self, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getPitch.invoke(self, ((), _ctx))

        def begin_getPitch(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getPitch.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getPitch(self, _r):
            return _M_WorldStateTopic.WorldState._op_getPitch.end(self, _r)

        def getShootingDirection(self, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getShootingDirection.invoke(self, ((), _ctx))

        def begin_getShootingDirection(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getShootingDirection.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getShootingDirection(self, _r):
            return _M_WorldStateTopic.WorldState._op_getShootingDirection.end(self, _r)

        def getTeamColour(self, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getTeamColour.invoke(self, ((), _ctx))

        def begin_getTeamColour(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_WorldStateTopic.WorldState._op_getTeamColour.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getTeamColour(self, _r):
            return _M_WorldStateTopic.WorldState._op_getTeamColour.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_WorldStateTopic.WorldStatePrx.ice_checkedCast(proxy, '::WorldStateTopic::WorldState', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_WorldStateTopic.WorldStatePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_WorldStateTopic._t_WorldStatePrx = IcePy.defineProxy('::WorldStateTopic::WorldState', WorldStatePrx)

    _M_WorldStateTopic._t_WorldState = IcePy.defineClass('::WorldStateTopic::WorldState', WorldState, (), True, None, (), ())
    WorldState._ice_type = _M_WorldStateTopic._t_WorldState

    WorldState._op_getUpdateID = IcePy.Operation('getUpdateID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), IcePy._t_long, ())
    WorldState._op_getBallPosition = IcePy.Operation('getBallPosition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_WorldStateTopic._t_Ball, ())
    WorldState._op_getYellowRobot = IcePy.Operation('getYellowRobot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_WorldStateTopic._t_Robot, ())
    WorldState._op_getBlueRobot = IcePy.Operation('getBlueRobot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_WorldStateTopic._t_Robot, ())
    WorldState._op_getPitch = IcePy.Operation('getPitch', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), IcePy._t_int, ())
    WorldState._op_getShootingDirection = IcePy.Operation('getShootingDirection', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), IcePy._t_int, ())
    WorldState._op_getTeamColour = IcePy.Operation('getTeamColour', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), IcePy._t_int, ())

    _M_WorldStateTopic.WorldState = WorldState
    del WorldState

    _M_WorldStateTopic.WorldStatePrx = WorldStatePrx
    del WorldStatePrx

# End of module WorldStateTopic
