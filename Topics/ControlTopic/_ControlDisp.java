// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

package ControlTopic;

// <auto-generated>
//
// Generated from file `Control.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public abstract class _ControlDisp extends Ice.ObjectImpl implements Control
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::ControlTopic::Control",
        "::Ice::Object"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[0];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    public final void
    connect()
    {
        connect(null);
    }

    public final void
    disconnect()
    {
        disconnect(null);
    }

    public final void
    driveBackward()
    {
        driveBackward(null);
    }

    public final void
    driveBackwardSpeed(int speed)
    {
        driveBackwardSpeed(speed, null);
    }

    public final void
    driveForward()
    {
        driveForward(null);
    }

    public final void
    driveForwardSpeed(int speed)
    {
        driveForwardSpeed(speed, null);
    }

    public final void
    driveStop()
    {
        driveStop(null);
    }

    public final boolean
    isMoving()
    {
        return isMoving(null);
    }

    public final void
    kick()
    {
        kick(null);
    }

    public final void
    sendInt(int i)
    {
        sendInt(i, null);
    }

    public final void
    setLeftMotorSpeed(int speed)
    {
        setLeftMotorSpeed(speed, null);
    }

    public final void
    setRightMotorSpeed(int speed)
    {
        setRightMotorSpeed(speed, null);
    }

    public final void
    shutDownRobot()
    {
        shutDownRobot(null);
    }

    public final void
    turnLeft()
    {
        turnLeft(null);
    }

    public final void
    turnLeftSpeed(int speed)
    {
        turnLeftSpeed(speed, null);
    }

    public final void
    turnRight()
    {
        turnRight(null);
    }

    public final void
    turnRightSpeed(int speed)
    {
        turnRightSpeed(speed, null);
    }

    public static Ice.DispatchStatus
    ___connect(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.connect(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___disconnect(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.disconnect(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setLeftMotorSpeed(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int speed;
        speed = __is.readInt();
        __is.endReadEncaps();
        __obj.setLeftMotorSpeed(speed, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setRightMotorSpeed(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int speed;
        speed = __is.readInt();
        __is.endReadEncaps();
        __obj.setRightMotorSpeed(speed, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___driveForward(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.driveForward(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___driveForwardSpeed(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int speed;
        speed = __is.readInt();
        __is.endReadEncaps();
        __obj.driveForwardSpeed(speed, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___driveBackward(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.driveBackward(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___driveBackwardSpeed(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int speed;
        speed = __is.readInt();
        __is.endReadEncaps();
        __obj.driveBackwardSpeed(speed, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___driveStop(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.driveStop(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___turnLeft(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.turnLeft(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___turnLeftSpeed(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int speed;
        speed = __is.readInt();
        __is.endReadEncaps();
        __obj.turnLeftSpeed(speed, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___turnRight(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.turnRight(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___turnRightSpeed(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int speed;
        speed = __is.readInt();
        __is.endReadEncaps();
        __obj.turnRightSpeed(speed, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___kick(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.kick(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___sendInt(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int i;
        i = __is.readInt();
        __is.endReadEncaps();
        __obj.sendInt(i, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___shutDownRobot(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.shutDownRobot(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___isMoving(Control __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.isMoving(__current);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "connect",
        "disconnect",
        "driveBackward",
        "driveBackwardSpeed",
        "driveForward",
        "driveForwardSpeed",
        "driveStop",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isMoving",
        "kick",
        "sendInt",
        "setLeftMotorSpeed",
        "setRightMotorSpeed",
        "shutDownRobot",
        "turnLeft",
        "turnLeftSpeed",
        "turnRight",
        "turnRightSpeed"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___connect(this, in, __current);
            }
            case 1:
            {
                return ___disconnect(this, in, __current);
            }
            case 2:
            {
                return ___driveBackward(this, in, __current);
            }
            case 3:
            {
                return ___driveBackwardSpeed(this, in, __current);
            }
            case 4:
            {
                return ___driveForward(this, in, __current);
            }
            case 5:
            {
                return ___driveForwardSpeed(this, in, __current);
            }
            case 6:
            {
                return ___driveStop(this, in, __current);
            }
            case 7:
            {
                return ___ice_id(this, in, __current);
            }
            case 8:
            {
                return ___ice_ids(this, in, __current);
            }
            case 9:
            {
                return ___ice_isA(this, in, __current);
            }
            case 10:
            {
                return ___ice_ping(this, in, __current);
            }
            case 11:
            {
                return ___isMoving(this, in, __current);
            }
            case 12:
            {
                return ___kick(this, in, __current);
            }
            case 13:
            {
                return ___sendInt(this, in, __current);
            }
            case 14:
            {
                return ___setLeftMotorSpeed(this, in, __current);
            }
            case 15:
            {
                return ___setRightMotorSpeed(this, in, __current);
            }
            case 16:
            {
                return ___shutDownRobot(this, in, __current);
            }
            case 17:
            {
                return ___turnLeft(this, in, __current);
            }
            case 18:
            {
                return ___turnLeftSpeed(this, in, __current);
            }
            case 19:
            {
                return ___turnRight(this, in, __current);
            }
            case 20:
            {
                return ___turnRightSpeed(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type ControlTopic::Control was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type ControlTopic::Control was not generated with stream support";
        throw ex;
    }
}
