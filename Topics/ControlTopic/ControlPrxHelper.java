// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

package ControlTopic;

// <auto-generated>
//
// Generated from file `Control.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class ControlPrxHelper extends Ice.ObjectPrxHelperBase implements ControlPrx
{
    public void
    connect()
    {
        connect(null, false);
    }

    public void
    connect(java.util.Map<String, String> __ctx)
    {
        connect(__ctx, true);
    }

    private void
    connect(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.connect(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __connect_name = "connect";

    public Ice.AsyncResult begin_connect()
    {
        return begin_connect(null, false, null);
    }

    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx)
    {
        return begin_connect(__ctx, true, null);
    }

    public Ice.AsyncResult begin_connect(Ice.Callback __cb)
    {
        return begin_connect(null, false, __cb);
    }

    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connect(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_connect(Callback_Control_connect __cb)
    {
        return begin_connect(null, false, __cb);
    }

    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, Callback_Control_connect __cb)
    {
        return begin_connect(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __connect_name, __cb);
        try
        {
            __result.__prepare(__connect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_connect(Ice.AsyncResult __result)
    {
        __end(__result, __connect_name);
    }

    public void
    disconnect()
    {
        disconnect(null, false);
    }

    public void
    disconnect(java.util.Map<String, String> __ctx)
    {
        disconnect(__ctx, true);
    }

    private void
    disconnect(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.disconnect(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnect_name = "disconnect";

    public Ice.AsyncResult begin_disconnect()
    {
        return begin_disconnect(null, false, null);
    }

    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx)
    {
        return begin_disconnect(__ctx, true, null);
    }

    public Ice.AsyncResult begin_disconnect(Ice.Callback __cb)
    {
        return begin_disconnect(null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnect(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_disconnect(Callback_Control_disconnect __cb)
    {
        return begin_disconnect(null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, Callback_Control_disconnect __cb)
    {
        return begin_disconnect(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnect_name, __cb);
        try
        {
            __result.__prepare(__disconnect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_disconnect(Ice.AsyncResult __result)
    {
        __end(__result, __disconnect_name);
    }

    public void
    driveBackward()
    {
        driveBackward(null, false);
    }

    public void
    driveBackward(java.util.Map<String, String> __ctx)
    {
        driveBackward(__ctx, true);
    }

    private void
    driveBackward(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.driveBackward(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __driveBackward_name = "driveBackward";

    public Ice.AsyncResult begin_driveBackward()
    {
        return begin_driveBackward(null, false, null);
    }

    public Ice.AsyncResult begin_driveBackward(java.util.Map<String, String> __ctx)
    {
        return begin_driveBackward(__ctx, true, null);
    }

    public Ice.AsyncResult begin_driveBackward(Ice.Callback __cb)
    {
        return begin_driveBackward(null, false, __cb);
    }

    public Ice.AsyncResult begin_driveBackward(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driveBackward(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_driveBackward(Callback_Control_driveBackward __cb)
    {
        return begin_driveBackward(null, false, __cb);
    }

    public Ice.AsyncResult begin_driveBackward(java.util.Map<String, String> __ctx, Callback_Control_driveBackward __cb)
    {
        return begin_driveBackward(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_driveBackward(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __driveBackward_name, __cb);
        try
        {
            __result.__prepare(__driveBackward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_driveBackward(Ice.AsyncResult __result)
    {
        __end(__result, __driveBackward_name);
    }

    public void
    driveBackwardSpeed(int speed)
    {
        driveBackwardSpeed(speed, null, false);
    }

    public void
    driveBackwardSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        driveBackwardSpeed(speed, __ctx, true);
    }

    private void
    driveBackwardSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.driveBackwardSpeed(speed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __driveBackwardSpeed_name = "driveBackwardSpeed";

    public Ice.AsyncResult begin_driveBackwardSpeed(int speed)
    {
        return begin_driveBackwardSpeed(speed, null, false, null);
    }

    public Ice.AsyncResult begin_driveBackwardSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        return begin_driveBackwardSpeed(speed, __ctx, true, null);
    }

    public Ice.AsyncResult begin_driveBackwardSpeed(int speed, Ice.Callback __cb)
    {
        return begin_driveBackwardSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_driveBackwardSpeed(int speed, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driveBackwardSpeed(speed, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_driveBackwardSpeed(int speed, Callback_Control_driveBackwardSpeed __cb)
    {
        return begin_driveBackwardSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_driveBackwardSpeed(int speed, java.util.Map<String, String> __ctx, Callback_Control_driveBackwardSpeed __cb)
    {
        return begin_driveBackwardSpeed(speed, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_driveBackwardSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __driveBackwardSpeed_name, __cb);
        try
        {
            __result.__prepare(__driveBackwardSpeed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(speed);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_driveBackwardSpeed(Ice.AsyncResult __result)
    {
        __end(__result, __driveBackwardSpeed_name);
    }

    public void
    driveForward()
    {
        driveForward(null, false);
    }

    public void
    driveForward(java.util.Map<String, String> __ctx)
    {
        driveForward(__ctx, true);
    }

    private void
    driveForward(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.driveForward(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __driveForward_name = "driveForward";

    public Ice.AsyncResult begin_driveForward()
    {
        return begin_driveForward(null, false, null);
    }

    public Ice.AsyncResult begin_driveForward(java.util.Map<String, String> __ctx)
    {
        return begin_driveForward(__ctx, true, null);
    }

    public Ice.AsyncResult begin_driveForward(Ice.Callback __cb)
    {
        return begin_driveForward(null, false, __cb);
    }

    public Ice.AsyncResult begin_driveForward(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driveForward(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_driveForward(Callback_Control_driveForward __cb)
    {
        return begin_driveForward(null, false, __cb);
    }

    public Ice.AsyncResult begin_driveForward(java.util.Map<String, String> __ctx, Callback_Control_driveForward __cb)
    {
        return begin_driveForward(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_driveForward(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __driveForward_name, __cb);
        try
        {
            __result.__prepare(__driveForward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_driveForward(Ice.AsyncResult __result)
    {
        __end(__result, __driveForward_name);
    }

    public void
    driveForwardSpeed(int speed)
    {
        driveForwardSpeed(speed, null, false);
    }

    public void
    driveForwardSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        driveForwardSpeed(speed, __ctx, true);
    }

    private void
    driveForwardSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.driveForwardSpeed(speed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __driveForwardSpeed_name = "driveForwardSpeed";

    public Ice.AsyncResult begin_driveForwardSpeed(int speed)
    {
        return begin_driveForwardSpeed(speed, null, false, null);
    }

    public Ice.AsyncResult begin_driveForwardSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        return begin_driveForwardSpeed(speed, __ctx, true, null);
    }

    public Ice.AsyncResult begin_driveForwardSpeed(int speed, Ice.Callback __cb)
    {
        return begin_driveForwardSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_driveForwardSpeed(int speed, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driveForwardSpeed(speed, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_driveForwardSpeed(int speed, Callback_Control_driveForwardSpeed __cb)
    {
        return begin_driveForwardSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_driveForwardSpeed(int speed, java.util.Map<String, String> __ctx, Callback_Control_driveForwardSpeed __cb)
    {
        return begin_driveForwardSpeed(speed, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_driveForwardSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __driveForwardSpeed_name, __cb);
        try
        {
            __result.__prepare(__driveForwardSpeed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(speed);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_driveForwardSpeed(Ice.AsyncResult __result)
    {
        __end(__result, __driveForwardSpeed_name);
    }

    public void
    driveStop()
    {
        driveStop(null, false);
    }

    public void
    driveStop(java.util.Map<String, String> __ctx)
    {
        driveStop(__ctx, true);
    }

    private void
    driveStop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.driveStop(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __driveStop_name = "driveStop";

    public Ice.AsyncResult begin_driveStop()
    {
        return begin_driveStop(null, false, null);
    }

    public Ice.AsyncResult begin_driveStop(java.util.Map<String, String> __ctx)
    {
        return begin_driveStop(__ctx, true, null);
    }

    public Ice.AsyncResult begin_driveStop(Ice.Callback __cb)
    {
        return begin_driveStop(null, false, __cb);
    }

    public Ice.AsyncResult begin_driveStop(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driveStop(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_driveStop(Callback_Control_driveStop __cb)
    {
        return begin_driveStop(null, false, __cb);
    }

    public Ice.AsyncResult begin_driveStop(java.util.Map<String, String> __ctx, Callback_Control_driveStop __cb)
    {
        return begin_driveStop(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_driveStop(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __driveStop_name, __cb);
        try
        {
            __result.__prepare(__driveStop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_driveStop(Ice.AsyncResult __result)
    {
        __end(__result, __driveStop_name);
    }

    public boolean
    isMoving()
    {
        return isMoving(null, false);
    }

    public boolean
    isMoving(java.util.Map<String, String> __ctx)
    {
        return isMoving(__ctx, true);
    }

    private boolean
    isMoving(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("isMoving");
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                return __del.isMoving(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __isMoving_name = "isMoving";

    public Ice.AsyncResult begin_isMoving()
    {
        return begin_isMoving(null, false, null);
    }

    public Ice.AsyncResult begin_isMoving(java.util.Map<String, String> __ctx)
    {
        return begin_isMoving(__ctx, true, null);
    }

    public Ice.AsyncResult begin_isMoving(Ice.Callback __cb)
    {
        return begin_isMoving(null, false, __cb);
    }

    public Ice.AsyncResult begin_isMoving(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_isMoving(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_isMoving(Callback_Control_isMoving __cb)
    {
        return begin_isMoving(null, false, __cb);
    }

    public Ice.AsyncResult begin_isMoving(java.util.Map<String, String> __ctx, Callback_Control_isMoving __cb)
    {
        return begin_isMoving(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_isMoving(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__isMoving_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __isMoving_name, __cb);
        try
        {
            __result.__prepare(__isMoving_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_isMoving(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __isMoving_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public void
    kick()
    {
        kick(null, false);
    }

    public void
    kick(java.util.Map<String, String> __ctx)
    {
        kick(__ctx, true);
    }

    private void
    kick(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.kick(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __kick_name = "kick";

    public Ice.AsyncResult begin_kick()
    {
        return begin_kick(null, false, null);
    }

    public Ice.AsyncResult begin_kick(java.util.Map<String, String> __ctx)
    {
        return begin_kick(__ctx, true, null);
    }

    public Ice.AsyncResult begin_kick(Ice.Callback __cb)
    {
        return begin_kick(null, false, __cb);
    }

    public Ice.AsyncResult begin_kick(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_kick(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_kick(Callback_Control_kick __cb)
    {
        return begin_kick(null, false, __cb);
    }

    public Ice.AsyncResult begin_kick(java.util.Map<String, String> __ctx, Callback_Control_kick __cb)
    {
        return begin_kick(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_kick(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __kick_name, __cb);
        try
        {
            __result.__prepare(__kick_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_kick(Ice.AsyncResult __result)
    {
        __end(__result, __kick_name);
    }

    public void
    sendInt(int i)
    {
        sendInt(i, null, false);
    }

    public void
    sendInt(int i, java.util.Map<String, String> __ctx)
    {
        sendInt(i, __ctx, true);
    }

    private void
    sendInt(int i, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.sendInt(i, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __sendInt_name = "sendInt";

    public Ice.AsyncResult begin_sendInt(int i)
    {
        return begin_sendInt(i, null, false, null);
    }

    public Ice.AsyncResult begin_sendInt(int i, java.util.Map<String, String> __ctx)
    {
        return begin_sendInt(i, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendInt(int i, Ice.Callback __cb)
    {
        return begin_sendInt(i, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendInt(int i, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendInt(i, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendInt(int i, Callback_Control_sendInt __cb)
    {
        return begin_sendInt(i, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendInt(int i, java.util.Map<String, String> __ctx, Callback_Control_sendInt __cb)
    {
        return begin_sendInt(i, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendInt(int i, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendInt_name, __cb);
        try
        {
            __result.__prepare(__sendInt_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(i);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendInt(Ice.AsyncResult __result)
    {
        __end(__result, __sendInt_name);
    }

    public void
    setLeftMotorSpeed(int speed)
    {
        setLeftMotorSpeed(speed, null, false);
    }

    public void
    setLeftMotorSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        setLeftMotorSpeed(speed, __ctx, true);
    }

    private void
    setLeftMotorSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.setLeftMotorSpeed(speed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setLeftMotorSpeed_name = "setLeftMotorSpeed";

    public Ice.AsyncResult begin_setLeftMotorSpeed(int speed)
    {
        return begin_setLeftMotorSpeed(speed, null, false, null);
    }

    public Ice.AsyncResult begin_setLeftMotorSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        return begin_setLeftMotorSpeed(speed, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setLeftMotorSpeed(int speed, Ice.Callback __cb)
    {
        return begin_setLeftMotorSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_setLeftMotorSpeed(int speed, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setLeftMotorSpeed(speed, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setLeftMotorSpeed(int speed, Callback_Control_setLeftMotorSpeed __cb)
    {
        return begin_setLeftMotorSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_setLeftMotorSpeed(int speed, java.util.Map<String, String> __ctx, Callback_Control_setLeftMotorSpeed __cb)
    {
        return begin_setLeftMotorSpeed(speed, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setLeftMotorSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setLeftMotorSpeed_name, __cb);
        try
        {
            __result.__prepare(__setLeftMotorSpeed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(speed);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setLeftMotorSpeed(Ice.AsyncResult __result)
    {
        __end(__result, __setLeftMotorSpeed_name);
    }

    public void
    setRightMotorSpeed(int speed)
    {
        setRightMotorSpeed(speed, null, false);
    }

    public void
    setRightMotorSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        setRightMotorSpeed(speed, __ctx, true);
    }

    private void
    setRightMotorSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.setRightMotorSpeed(speed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setRightMotorSpeed_name = "setRightMotorSpeed";

    public Ice.AsyncResult begin_setRightMotorSpeed(int speed)
    {
        return begin_setRightMotorSpeed(speed, null, false, null);
    }

    public Ice.AsyncResult begin_setRightMotorSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        return begin_setRightMotorSpeed(speed, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setRightMotorSpeed(int speed, Ice.Callback __cb)
    {
        return begin_setRightMotorSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRightMotorSpeed(int speed, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setRightMotorSpeed(speed, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setRightMotorSpeed(int speed, Callback_Control_setRightMotorSpeed __cb)
    {
        return begin_setRightMotorSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_setRightMotorSpeed(int speed, java.util.Map<String, String> __ctx, Callback_Control_setRightMotorSpeed __cb)
    {
        return begin_setRightMotorSpeed(speed, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setRightMotorSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setRightMotorSpeed_name, __cb);
        try
        {
            __result.__prepare(__setRightMotorSpeed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(speed);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setRightMotorSpeed(Ice.AsyncResult __result)
    {
        __end(__result, __setRightMotorSpeed_name);
    }

    public void
    shutDownRobot()
    {
        shutDownRobot(null, false);
    }

    public void
    shutDownRobot(java.util.Map<String, String> __ctx)
    {
        shutDownRobot(__ctx, true);
    }

    private void
    shutDownRobot(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.shutDownRobot(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __shutDownRobot_name = "shutDownRobot";

    public Ice.AsyncResult begin_shutDownRobot()
    {
        return begin_shutDownRobot(null, false, null);
    }

    public Ice.AsyncResult begin_shutDownRobot(java.util.Map<String, String> __ctx)
    {
        return begin_shutDownRobot(__ctx, true, null);
    }

    public Ice.AsyncResult begin_shutDownRobot(Ice.Callback __cb)
    {
        return begin_shutDownRobot(null, false, __cb);
    }

    public Ice.AsyncResult begin_shutDownRobot(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shutDownRobot(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shutDownRobot(Callback_Control_shutDownRobot __cb)
    {
        return begin_shutDownRobot(null, false, __cb);
    }

    public Ice.AsyncResult begin_shutDownRobot(java.util.Map<String, String> __ctx, Callback_Control_shutDownRobot __cb)
    {
        return begin_shutDownRobot(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shutDownRobot(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shutDownRobot_name, __cb);
        try
        {
            __result.__prepare(__shutDownRobot_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_shutDownRobot(Ice.AsyncResult __result)
    {
        __end(__result, __shutDownRobot_name);
    }

    public void
    turnLeft()
    {
        turnLeft(null, false);
    }

    public void
    turnLeft(java.util.Map<String, String> __ctx)
    {
        turnLeft(__ctx, true);
    }

    private void
    turnLeft(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.turnLeft(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __turnLeft_name = "turnLeft";

    public Ice.AsyncResult begin_turnLeft()
    {
        return begin_turnLeft(null, false, null);
    }

    public Ice.AsyncResult begin_turnLeft(java.util.Map<String, String> __ctx)
    {
        return begin_turnLeft(__ctx, true, null);
    }

    public Ice.AsyncResult begin_turnLeft(Ice.Callback __cb)
    {
        return begin_turnLeft(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeft(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnLeft(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_turnLeft(Callback_Control_turnLeft __cb)
    {
        return begin_turnLeft(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeft(java.util.Map<String, String> __ctx, Callback_Control_turnLeft __cb)
    {
        return begin_turnLeft(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_turnLeft(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __turnLeft_name, __cb);
        try
        {
            __result.__prepare(__turnLeft_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_turnLeft(Ice.AsyncResult __result)
    {
        __end(__result, __turnLeft_name);
    }

    public void
    turnLeftSpeed(int speed)
    {
        turnLeftSpeed(speed, null, false);
    }

    public void
    turnLeftSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        turnLeftSpeed(speed, __ctx, true);
    }

    private void
    turnLeftSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.turnLeftSpeed(speed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __turnLeftSpeed_name = "turnLeftSpeed";

    public Ice.AsyncResult begin_turnLeftSpeed(int speed)
    {
        return begin_turnLeftSpeed(speed, null, false, null);
    }

    public Ice.AsyncResult begin_turnLeftSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        return begin_turnLeftSpeed(speed, __ctx, true, null);
    }

    public Ice.AsyncResult begin_turnLeftSpeed(int speed, Ice.Callback __cb)
    {
        return begin_turnLeftSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeftSpeed(int speed, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnLeftSpeed(speed, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_turnLeftSpeed(int speed, Callback_Control_turnLeftSpeed __cb)
    {
        return begin_turnLeftSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeftSpeed(int speed, java.util.Map<String, String> __ctx, Callback_Control_turnLeftSpeed __cb)
    {
        return begin_turnLeftSpeed(speed, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_turnLeftSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __turnLeftSpeed_name, __cb);
        try
        {
            __result.__prepare(__turnLeftSpeed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(speed);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_turnLeftSpeed(Ice.AsyncResult __result)
    {
        __end(__result, __turnLeftSpeed_name);
    }

    public void
    turnRight()
    {
        turnRight(null, false);
    }

    public void
    turnRight(java.util.Map<String, String> __ctx)
    {
        turnRight(__ctx, true);
    }

    private void
    turnRight(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.turnRight(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __turnRight_name = "turnRight";

    public Ice.AsyncResult begin_turnRight()
    {
        return begin_turnRight(null, false, null);
    }

    public Ice.AsyncResult begin_turnRight(java.util.Map<String, String> __ctx)
    {
        return begin_turnRight(__ctx, true, null);
    }

    public Ice.AsyncResult begin_turnRight(Ice.Callback __cb)
    {
        return begin_turnRight(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnRight(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnRight(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_turnRight(Callback_Control_turnRight __cb)
    {
        return begin_turnRight(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnRight(java.util.Map<String, String> __ctx, Callback_Control_turnRight __cb)
    {
        return begin_turnRight(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_turnRight(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __turnRight_name, __cb);
        try
        {
            __result.__prepare(__turnRight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_turnRight(Ice.AsyncResult __result)
    {
        __end(__result, __turnRight_name);
    }

    public void
    turnRightSpeed(int speed)
    {
        turnRightSpeed(speed, null, false);
    }

    public void
    turnRightSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        turnRightSpeed(speed, __ctx, true);
    }

    private void
    turnRightSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ControlDel __del = (_ControlDel)__delBase;
                __del.turnRightSpeed(speed, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __turnRightSpeed_name = "turnRightSpeed";

    public Ice.AsyncResult begin_turnRightSpeed(int speed)
    {
        return begin_turnRightSpeed(speed, null, false, null);
    }

    public Ice.AsyncResult begin_turnRightSpeed(int speed, java.util.Map<String, String> __ctx)
    {
        return begin_turnRightSpeed(speed, __ctx, true, null);
    }

    public Ice.AsyncResult begin_turnRightSpeed(int speed, Ice.Callback __cb)
    {
        return begin_turnRightSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_turnRightSpeed(int speed, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnRightSpeed(speed, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_turnRightSpeed(int speed, Callback_Control_turnRightSpeed __cb)
    {
        return begin_turnRightSpeed(speed, null, false, __cb);
    }

    public Ice.AsyncResult begin_turnRightSpeed(int speed, java.util.Map<String, String> __ctx, Callback_Control_turnRightSpeed __cb)
    {
        return begin_turnRightSpeed(speed, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_turnRightSpeed(int speed, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __turnRightSpeed_name, __cb);
        try
        {
            __result.__prepare(__turnRightSpeed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(speed);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_turnRightSpeed(Ice.AsyncResult __result)
    {
        __end(__result, __turnRightSpeed_name);
    }

    public static ControlPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::ControlTopic::Control"))
                {
                    ControlPrxHelper __h = new ControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ControlPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::ControlTopic::Control", __ctx))
                {
                    ControlPrxHelper __h = new ControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ControlPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::ControlTopic::Control"))
                {
                    ControlPrxHelper __h = new ControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ControlPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::ControlTopic::Control", __ctx))
                {
                    ControlPrxHelper __h = new ControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ControlPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ControlPrxHelper __h = new ControlPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ControlPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ControlPrxHelper __h = new ControlPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ControlDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ControlDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ControlPrx v)
    {
        __os.writeProxy(v);
    }

    public static ControlPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ControlPrxHelper result = new ControlPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
